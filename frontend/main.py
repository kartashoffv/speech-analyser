from dotenv import load_dotenv
import os
import streamlit as st
import logging
from components.sidebar import sidebar
import time
from core.parsing import load_audio_file

import requests

load_dotenv()

supported_formats = ["mp3", "wav"]
pretty_supported_formats = ", ".join(supported_formats)

logger = logging.getLogger()

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –†–ñ–î", page_icon="üìñ", layout="wide")
st.header("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤")

sidebar()

uploaded_files = st.file_uploader(
    f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö: {supported_formats}",
    type=supported_formats,
    accept_multiple_files=True,
)

submit = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑")

if not uploaded_files:
    st.stop()

processed_files = []

progress_text = "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∏–∑ {}"
progress_bar = st.progress(0, text=progress_text.format(0, len(uploaded_files)))

for ind, file in enumerate(uploaded_files):
    file_no = ind + 1
    processed_file = load_audio_file(file)
    if not processed_file:
        st.error(
            f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file.name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\
            –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: {pretty_supported_formats}"
        )
        logger.error(f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file.name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        continue
    if not processed_file.is_valid():
        st.error(
            f"–§–∞–π–ª {file.name} –Ω–µ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ {processed_file.format}.\n\
            –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
        )
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")
        uploaded_files.remove(file)
        processed_file.dispose()
        continue
    progress_bar.progress(
        file_no / len(uploaded_files),
        text=progress_text.format(file_no, len(uploaded_files)),
    )
    processed_files.append(processed_file)
else:
    time.sleep(0.5)
    progress_bar.empty()

if not processed_files:
    st.stop()


results = []

if not submit:
    st.stop()

progress_text = "–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {} –∏–∑ {}"
progress_bar = st.progress(0, text=progress_text.format(0, len(processed_files)))

for ind, processed_file in enumerate(processed_files):
    file_no = ind + 1
    API_HOST = os.getenv("API_HOST")
    response = requests.post(
        url=f"http://{API_HOST}:5000/api/audio_file",
        files={"file": processed_file.bytes},
    )
    if not response.status_code == 200:
        st.error(
            f"–í–æ–∑–Ω–∏–∫–ª–∞ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {processed_file.initial_name}.\n\
                 –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        )
        continue
    progress_bar.progress(
        file_no / len(processed_files),
        text=progress_text.format(file_no, len(processed_files)),
    )
    response = response.json()
    results.append(
        {
            "file_name": processed_file.initial_name,
            "script": response["script"],
            "class": response["class"],
        }
    )
    processed_file.dispose()

progress_bar.empty()


if not results:
    st.stop()

# Output Columns
file_name_col, script_col, class_col = st.columns([2, 3, 1])

with file_name_col:
    st.header("–ò–º—è —Ñ–∞–π–ª–∞")
    for result in results:
        st.markdown(result["file_name"])

with script_col:
    st.header("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞")
    for result in results:
        st.markdown(result["script"])

with class_col:
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç")
    for result in results:
        st.markdown(result["class"])
